Operational Policy and Playbook for Multi-Model Orchestration (FWBer)
Version: 1.1.0
Date: 2025-10-17

Purpose and Scope
- Deliver a secure, reliable, parallel orchestration environment on Windows for FWBer and future projects.
- Use stable MCP servers and CLIs that are already working; minimize custom orchestration by default.
- Standardize environment variables, paths, security, error handling, and logging across tools and servers.

Project Roots and Paths (Windows)
- PROJECT_ROOT: C:\Users\hyper\fwber
- AI_COORDINATION_DIR: C:\Users\hyper\fwber\AI_COORDINATION
- MCP_CONFIG_PATH: C:\Users\hyper\fwber\tools_config_files\enhanced_mcp_settings.json
- MCP_FILESYSTEM_ROOTS: C:\Users\hyper\fwber
- USERPROFILE: C:\Users\hyper

Secrets and API Keys (set via environment, not files)
- OPENAI_API_KEY
- OPENAI_ORG (optional)
- ANTHROPIC_API_KEY
- GEMINI_API_KEY
- XAI_API_KEY (Grok)
- OPENROUTER_API_KEY (optional)
- POSTGRES_URL (optional; only if database tools are enabled)

Current Tooling and Model Inventory (prioritized)
- Primary models: Claude 4.5; GPT-5-Codex (low/medium/high); GPT-5 (variants); Gemini 2.5 Pro/Flash; Cheetah; Code Supernova 1M; Grok 4 Code, Grok Code Fast 1.
- Active CLIs/Tools: Codex CLI, Gemini CLI, GitHub Copilot CLI, Grok CLI (needs API key), Serena MCP, Sequential Thinking MCP, Codex MCP, Gemini MCP Tool.
- IDE Integrations: Cursor + plugins (Cline, Claude Code, Codex); JetBrains WebStorm MCP disabled by policy until stable.
- Optional orchestration: Custom AI Orchestrator script is present but disabled by default in MCP config. Use only if you need bespoke flows; otherwise prefer Serena + model MCPs.

MCP Server Selection and Policy
- Enabled (stable): serena, sequential-thinking, codex-mcp-server, gemini-mcp-tool
- Disabled (policy or stability): jetbrains (requires IDE runtime; prior timeouts)
- Least-privilege paths: allowedPaths restricted to C:\Users\hyper\fwber
- Timeouts and retries (defaults): timeoutMs=30s, startupTimeoutMs=60s, maxRetries=2, backoff base=500ms, factor=2.0, max=15s, jitter on
- Health checks: Use “--version” or “--help” where available; otherwise disable healthCheck

Codex CLI Environment Allowlist (no bypass, explicit policy)
- File: C:\Users\hyper\.codex\config.toml
- Minimal allowlist (recommended):
[security]
env_allowlist = [
  "PROJECT_ROOT",
  "MCP_CONFIG_PATH",
  "MCP_FILESYSTEM_ROOTS",
  "OPENAI_API_KEY",
  "ANTHROPIC_API_KEY",
  "GEMINI_API_KEY",
  "XAI_API_KEY",
  "OPENROUTER_API_KEY",
  "USERPROFILE",
  "PATH"
]
filesystem_roots = ["C:\\Users\\hyper\\fwber"]

- Secure-expanded allowlist (opt-in after validation):
[security.expanded]
env_allowlist = [
  "PROJECT_ROOT",
  "AI_COORDINATION_DIR",
  "MCP_CONFIG_PATH",
  "MCP_FILESYSTEM_ROOTS",
  "SERENA_HOME",
  "ZEN_HOME",
  "OPENAI_API_KEY",
  "OPENAI_ORG",
  "ANTHROPIC_API_KEY",
  "GEMINI_API_KEY",
  "XAI_API_KEY",
  "OPENROUTER_API_KEY",
  "POSTGRES_URL",
  "USERPROFILE",
  "PATH"
]
filesystem_roots = ["C:\\Users\\hyper\\fwber"]

Operational Defaults for Orchestration
- Prefer orchestration via Serena MCP, Sequential Thinking MCP, and native provider MCPs.
- Custom orchestrator [AIOrchestrator.orchestrateTask()](tools_config_files/ai-orchestrator.js:80) is available but disabled in MCP settings by default. Enable only if you need advanced parallel policies not provided by your active MCPs.
- Concurrency: 4 sessions max (configurable by AI_MAX_CONCURRENCY)
- Task timeout: 5 minutes (AI_TASK_TIMEOUT_MS=300000)
- Model timeout: 30 seconds (AI_MODEL_TIMEOUT_MS=30000)
- Retries: 2 with exponential backoff + jitter
- Circuit breaker: open after 3 fails in 2 minutes; 5-minute cooldown

Security and Privacy Practices
- Store secrets only in environment variables; never commit keys to version control.
- Redact secrets from all logs (enable AI_LOG_REDACT=1).
- Restrict filesystem access to C:\Users\hyper\fwber unless explicitly opted in.
- Use least-privilege env allowlists for MCP clients (Codex, etc.).
- Limit high-risk flags (“full-auto”, raw mode) and prefer “secure” profiles defined in CLI configs.

Structured Logging and Auditing
- Enable JSONL logs with AI_LOG_JSONL=1
- Log file: C:\Users\hyper\fwber\AI_COORDINATION\logs\orchestrator.jsonl
- Rotation: rotate at 10 MB or 10,000 events; keep 5 rotations; 14-day retention
- Event keys: ts, level, event, taskId, model, durationMs, attempt, outcome, error, meta
- Sample events: task_started, model_consult_started, model_consult_finished, consensus_finalized, task_completed, task_failed

Standard Operating Workflow (Recommended)
1) Verify MCP servers
- Validate serena, codex-mcp-server, gemini-mcp-tool, sequential-thinking with simple “--help” or version commands.
- If any fail, investigate timeouts, network, or package availability.

2) Verify CLIs and Authentication
- Codex: codex login status
- Gemini: gemini auth status
- Grok: set XAI_API_KEY and run “grok --help” (Grok CLI is unofficial; keep it isolated and minimal privileges)

3) Use Model-Specific CLI for Primary Tasks
- Implementation: codex exec --model gpt-5-codex-high "Implement feature X"
- Architecture: gemini -m gemini-2.5-pro "Analyze scalability needs"
- Cross-check with another model via MCP tooling or second CLI

4) Use Serena MCP for Contextual Code Ops
- Symbol overviews, references, memory-backed summaries; constrain filesystem paths

5) Parallel Perspectives (Optional)
- If you need multiple models in parallel with weighted consensus, either:
  - Use Serena + provider MCP tools to collect multiple opinions; or
  - Enable the custom orchestrator (disabled by default) and route tasks through it with limited concurrency and auditing

6) Documentation and Change Capture
- Append decisions to shared logs; periodically persist summaries via Serena memory or a dedicated doc

Recommended Policies per Task Type
- Implementation: GPT-5-Codex (high), plus Grok (fast code) as secondary if API key configured
- Architecture/Reasoning: Claude 4.5 + Gemini 2.5 Pro
- Creative/Brainstorming: Gemini 2.5 Flash + Claude 4.5
- Performance Optimization: Cheetah + GPT-5-Codex High
- Large Context/Continuity: Code Supernova 1M + Claude 4.5

Troubleshooting Quick Reference
- Timeouts starting MCP servers: Increase startupTimeoutMs to 90s; validate Node/NPX/UV availability; check PATH issues.
- JetBrains MCP “connection refused/closed”: Keep disabled unless WebStorm is running and reachable; use HTTP/SSE only if required and stable.
- Codex “env whitelist” failures: Confirm [security] env_allowlist includes required names; avoid wildcarding.
- Package not found (NPM): Use exact package names; if community package fails, pin version or temporarily disable that server.
- Windows console encoding: Prefer UTF-8 (chcp 65001) for certain installers; or avoid installers that emit Unicode glyphs if they break.

Performance and Reliability
- Keep maxConcurrentSessions modest (e.g., 4) to avoid rate limits and local resource contention.
- Use retries sparingly; respect provider rate limits and backoff.
- Circuit breaker prevents thrashing on flaky providers; observe cooldowns before re-enabling.

When to Enable the Custom Orchestrator
- You need strict, policy-driven routing, per-model quotas, explicit consensus math, or audit trails beyond what current MCP servers provide.
- To enable: set “claude-code-orchestrator.enabled” to true in [tools_config_files/enhanced_mcp_settings.json](tools_config_files/enhanced_mcp_settings.json) and ensure environment variables for logging and directories are set.

WSL vs Native Windows
- Prefer native Windows paths already used in all configurations.
- If you opt into WSL tools, ensure consistent path translation and env allowlists; avoid mixing both within the same command chain.

Acceptance Checklist for Any New Tool/Server
- Paths: only absolute Windows paths; no ~
- Env: documented names only; keys set via OS, not hardcoded
- Security: least-privilege allowlists; no broad roots
- Logging: redact secrets; structured JSONL if enabled
- Timeouts and retries: 30s/60s with 2 retries and exponential backoff
- Health checks: “--version/--help” or disabled with justification

Change Log
- 1.1.0 (2025-10-17)
  - Rewrote this file into an operational policy with security, orchestration workflow, Codex env allowlist, and troubleshooting guide
  - Standardized Windows paths (hyper → hyper)
  - Set JetBrains MCP disabled by default; custom orchestrator disabled by default
  - Introduced JSONL structured logging and rotation guidance
